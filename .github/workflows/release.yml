name: Release Workflow
description: "A barebones release workflow action..."

on:
  push:
    branches:
      - master
  
  workflow_dispatch:
    inputs:
      version:
        description: "The version of the chart to release (in format platform---*)."
        required: true

jobs:
  build_chart_workflow:
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Release Platform
        run: |
          VERSION="${{ inputs.version }}"
          echo "platform/${VERSION}"

      - name: Make Helm Dependency Update Script Executable
        run: chmod +x ./helm-dependency-update.sh

      - name: Run Helm Dependency Update
        run: ./helm-dependency-update.sh

      - name: Build Helm Charts
        run: |
          CHARTS_TO_BUILD='["prometheus", "jaeger", "loki"]'
          NEXT_VERSION="0-5-0"
          CHART_VERSION=$(echo $NEXT_VERSION | tr '-' '.')
      
          echo "Building charts with version: $CHART_VERSION"
      
          for chart in $(echo "$CHARTS_TO_BUILD" | jq -r '.[]'); do
            echo "Processing chart: $chart"
            helm dependency update charts/$chart
            helm package charts/$chart --version $CHART_VERSION
          done
        shell: bash

    outputs:
      version: ${{ inputs.version }}

  commit_and_release:
    runs-on: ubuntu-latest
    needs: build_chart_workflow

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Configure Git Author
        run: |
          git config --global user.name "Infra Automation Bot"
          git config --global user.email "infra-bot@example.com"

      - name: Validate Input Version
        run: |
          if [[ -z "${{ inputs.version }}" ]]; then
            echo "Error: Version input is missing!"
            exit 1
          fi

      - name: Transform Input Version
        run: |
          echo "Original version: ${{ inputs.version }}"
          CHART_VERSION=$(echo "${{ inputs.version }}" | tr '-' '.')
          echo "Transformed version: $CHART_VERSION"
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_ENV

          
      - name: Create and Checkout Release Branch
        run: |
          RELEASE_BRANCH="platform/$CHART_VERSION"
      
          # Validate branch name format
          if ! git check-ref-format --branch "$RELEASE_BRANCH"; then
            echo "Error: Invalid branch name: $RELEASE_BRANCH"
            exit 1
          fi
      
          # Fetch all branches from remote
          git fetch origin
      
          # Check if the branch exists on the remote
          if git ls-remote --exit-code --heads origin "$RELEASE_BRANCH"; then
            echo "Branch $RELEASE_BRANCH already exists. Checking out..."
            git checkout "$RELEASE_BRANCH" || git checkout -b "$RELEASE_BRANCH" --track origin/"$RELEASE_BRANCH"
          else
            echo "Branch $RELEASE_BRANCH does not exist. Creating..."
            git checkout -b "$RELEASE_BRANCH"
            git push origin "$RELEASE_BRANCH"
          fi
      
          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV

          
      - name: Update Chart.yaml with New Version
        run: |
          sed -i "s/^version: .*/version: $CHART_VERSION/" Chart.yaml
          echo "Updated Chart.yaml:"
          cat Chart.yaml


      - name: Commit Helm Chart Updates
        run: |
          git add Chart.yaml
          if git diff --staged --quiet; then
            echo "No changes detected, skipping commit."
            exit 0
          fi
          git commit -m "chore: update Helm dependencies"

      - name: Push Changes
        run: |
          git fetch origin
          git rebase origin/$(git branch --show-current) || git rebase --abort
          git push origin "$(git branch --show-current)" --force
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Check if PR already exists
        id: check_pr
        run: |
          EXISTING_PR=$(gh pr list --base master --head "$RELEASE_BRANCH" --json number --jq '.[0].number' || echo "")
          if [[ -n "$EXISTING_PR" ]]; then
            echo "PR_EXISTS=true" >> $GITHUB_ENV
            echo "EXISTING_PR=$EXISTING_PR" >> $GITHUB_ENV
          else
            echo "PR_EXISTS=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
  
      - name: Create Pull Request
        if: env.PR_EXISTS == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          PR_URL=$(gh pr create \
            --title "Platform release candidate $CHART_VERSION" \
            --body "This PR updates Helm dependencies and prepares for release." \
            --base master \
            --head "$RELEASE_BRANCH")
      
          echo "PR created: $PR_URL"
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
  
      - name: Assign PR
        if: env.PR_EXISTS == 'false'
        run: |
          gh pr edit $PR_URL --add-assignee "Owolabi16"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      # - name: Trigger Infra Chart Build
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.PAT_TOKEN }}
      #     script: |
      #       await github.rest.actions.createWorkflowDispatch({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         workflow_id: "build-infra-charts.yml",  # Ensure the file exists
      #         ref: "master",
      #         inputs: {
      #           version: process.env.CHART_VERSION || "latest"
      #         }
      #       });

      - name: Trigger Infra Chart Build
        uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
          owner: keithconvictional
          repo: myrepo
          github_token: ${{ secrets.PAT_TOKEN }}
          workflow_file_name: build-infra-charts.yml
          ref: master
          wait_interval: 10
          propagate_failure: false
          trigger_workflow: true
          wait_workflow: true





